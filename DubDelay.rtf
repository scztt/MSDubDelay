{\rtf1\ansi\ansicpg1252\cocoartf1138
{\fonttbl\f0\fnil\fcharset0 LucidaSans;\f1\fnil\fcharset0 LucidaSans-Demi;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green102\blue0;\red0\green0\blue179;
\red128\green0\blue0;\red179\green0\blue179;\red179\green0\blue179;\red0\green0\blue179;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs22 \cf2 \
\
\cf3 /* Not used\
	s = Server.internal.boot;\
	// test
	p = Dictionary.new;\
	DualEnvir.all = p;\
*/\cf2 \
\
 \cf3 // Execute one time\cf2 \
(\
	\cf4 DualEnvir\cf2 .new(s, \cf5 \\rlive\cf2 );\
	p[\cf5 \\rlive\cf2 ].linkDoc;\
	\cf4 Document\cf2 .current.proxyBold;\
)\
\
k = \cf4 KorgControl\cf2 (s, \cf5 \\rlive\cf2 );\
k.start;\
k.stop\
k.debugScope;\
\
k.setSpec( \cf5 \\knob1\cf2 , \cf4 ControlSpec\cf2 (\cf6 20\cf2 ,\cf6 16000\cf2 , warp: \cf5 \\exponential\cf2   ) );\
k.setSpec( \cf5 \\knob2\cf2 , \cf4 ControlSpec\cf2 (\cf6 16000\cf2 ,\cf6 400\cf2 , warp: \cf5 \\exponential\cf2   ) );\
k.setSpec( \cf5 \\knob3\cf2 , \cf4 ControlSpec\cf2 (\cf6 -50\cf2 , \cf6 -1\cf2 , warp: \cf5 \\exponential\cf2   ) );\
k.setSpec( \cf5 \\knob4\cf2 , \cf4 ControlSpec\cf2 (\cf6 40\cf2 , \cf6 1 \cf2 ) );\
\
k.setSpec( \cf5 \\slider1\cf2 , \cf4 ControlSpec\cf2 (\cf6 -50\cf2 , \cf6 0\cf2 ) );\
k.setSpec( \cf5 \\slider2\cf2 , \cf4 ControlSpec\cf2 (\cf6 -50\cf2 , \cf6 0\cf2 ) );\
k.setSpec( \cf5 \\slider3\cf2 , \cf4 ControlSpec\cf2 (\cf6 -50\cf2 , \cf6 0\cf2 ) );\
k.setSpec( \cf5 \\slider4\cf2 , \cf4 ControlSpec\cf2 (\cf6 -50\cf2 , \cf6 0\cf2 ) );\
\
\
~bpm = \cf6 124.8\cf2 ;\
\

\f1\b ~in
\f0\b0  = \{\
	\cf4 SoundIn\cf2 .ar([\cf6 0\cf2 ,\cf6 1\cf2 ]);\
\};\
\
(\

\f1\b ~in
\f0\b0 .play;\

\f1\b ~mainDelay
\f0\b0 .stop;\
);\
\
(\

\f1\b ~in
\f0\b0 .stop;\

\f1\b ~mainDelay
\f0\b0 .play;\
);\
\

\f1\b ~mainBus
\f0\b0 .clear\

\f1\b ~mainBus
\f0\b0  = \{\
	
\f1\b ~dchan1
\f0\b0 .ar(\cf6 2\cf2 )\
	+  
\f1\b ~dchan2
\f0\b0 .ar(\cf6 2\cf2 )\
\cf0 	+  
\f1\b ~dchan3
\f0\b0 .ar(\cf7 2\cf0 )\
	+  
\f1\b ~dchan4
\f0\b0 .ar(\cf7 2\cf0 );\
\cf2 \};\
\
\

\f1\b ~mainDelay
\f0\b0 .stop\

\f1\b ~mainDelay
\f0\b0 .clear;\

\f1\b ~mainDelay
\f0\b0  = \{\
	\cf4 | dryAmp = -12, \
		masterFeedAmt = -2, masterFeedDelay=8 |\cf2 \
	\cf4 var\cf2  in, cleanIn, masterFeed, \
		dry, bpmMult;\
		\
	bpmMult = \cf6 60 \cf2 / ~bpm.kr(\cf6 1\cf2 );\
		\
	in = 
\f1\b ~mainBus
\f0\b0 .ar(\cf6 2\cf2 );\
	cleanIn = (~in.ar(\cf6 2\cf2 ) * dryAmp.dbamp);\
		\
	\cf3 // Feed stage\cf2 \
	masterFeedDelay = masterFeedDelay * bpmMult;\
	masterFeed = in + (\cf4 LocalIn\cf2 .ar(\cf6 2\cf2 ) * masterFeedAmt.dbamp);\
	masterFeed = \cf4 DelayN\cf2 .ar( masterFeed, \cf6 60\cf2 , masterFeedDelay );\
	masterFeed = [ \
		(masterFeed[\cf6 0\cf2 ] * \cf6 0.75\cf2 ) + (masterFeed[\cf6 1\cf2 ] * \cf6 0.25\cf2 ),\
		(masterFeed[\cf6 1\cf2 ] * \cf6 0.75\cf2 ) + (masterFeed[\cf6 0\cf2 ] * \cf6 0.25\cf2 )\
	];\
	\
	\cf4 LocalOut\cf2 .ar(masterFeed);\
	in + cleanIn + masterFeed;\
\};\

\f1\b ~mainDelay
\f0\b0 .play;\

\f1\b ~mainDelay
\f0\b0 .stop;\
\
\
\cf3 //////////////////////////////////////////////////////////////////////////////////////////////\cf2 \
\cf3 //\cf2 \

\f1\b ~dchan1
\f0\b0 .clear;\

\f1\b ~dchan1
\f0\b0  = \{\
	\cf4 | outAmp= -128, lowCut=170,\
		feedbackAmp = -0.8, feedbackDelay=#[3,4] |\cf2 \
	\cf4 var\cf2  in, feedbackSig, \
		dry, bpmMult;\
\
	bpmMult = \cf6 60 \cf2 / ~bpm.kr(\cf6 1\cf2 );\
	feedbackDelay = feedbackDelay * bpmMult;\
	\
	in = 
\f1\b ~in
\f0\b0 .ar(\cf6 2\cf2 );\
	in = \cf4 BLPF\cf2 .ar(in, \cf6 6\cf2 , lowCut);	\
	\
	\cf3 // Feed stage\cf2 \
	feedbackSig = in + (\cf4 LocalIn\cf2 .ar(\cf6 2\cf2 ) * feedbackAmp.dbamp);\
	feedbackSig = \cf4 DelayC\cf2 .ar( feedbackSig, \cf6 10\cf2 , feedbackDelay );	feedbackSig = [ \
		(feedbackSig[\cf6 0\cf2 ] * \cf6 0.75\cf2 ) + (feedbackSig[\cf6 1\cf2 ] * \cf6 0.25\cf2 ),\
		(feedbackSig[\cf6 1\cf2 ] * \cf6 0.75\cf2 ) + (feedbackSig[\cf6 0\cf2 ] * \cf6 0.25\cf2 )\
	];\
	\cf3 //masterFeed = BLPF.ar(masterFeed, 6, lowCut);	\cf2 \
	\
	\cf4 LocalOut\cf2 .ar(feedbackSig);\
	(in + feedbackSig) * outAmp.dbamp;\
\};\
~dchan1.set(\cf5 \\lowCut\cf2 , k.asMap(\cf5 \\knob1\cf2 ));\
~dchan1.set(\cf5 \\outAmp\cf2 , k.asMap(\cf5 \\slider1\cf2 ));\
\
\
\cf3 //////////////////////////////////////////////////////////////////////////////////////////////\cf2 \
\cf3 //\cf2 \

\f1\b ~dchan2
\f0\b0 .clear;\

\f1\b ~dchan2
\f0\b0  = \{\
	\cf4 | outAmp= -128, highCut=19070,\
		feedbackAmp = -1, feedbackDelay=#[4,6] |\cf2 \
	\cf4 var\cf2  in, feedbackSig, \
		dry, bpmMult;\
\
	bpmMult = \cf6 60 \cf2 / ~bpm.kr(\cf6 1\cf2 );\
	feedbackDelay = feedbackDelay * bpmMult;\
	\
	in = 
\f1\b ~in
\f0\b0 .ar(\cf6 2\cf2 );\
	in = \cf4 BHPF\cf2 .ar(in, \cf6 6\cf2 , highCut);	\
	\
	\cf3 // Feed stage\cf2 \
	feedbackSig = in + (\cf4 LocalIn\cf2 .ar(\cf6 2\cf2 ) * feedbackAmp.dbamp);\
	feedbackSig = \cf4 DelayC\cf2 .ar( feedbackSig, \cf6 10\cf2 , feedbackDelay );	feedbackSig = [ \
		(feedbackSig[\cf6 0\cf2 ] * \cf6 0.75\cf2 ) + (feedbackSig[\cf6 1\cf2 ] * \cf6 0.25\cf2 ),\
		(feedbackSig[\cf6 1\cf2 ] * \cf6 0.75\cf2 ) + (feedbackSig[\cf6 0\cf2 ] * \cf6 0.25\cf2 )\
	];\
	\
	\cf4 LocalOut\cf2 .ar(feedbackSig);\
	(in + feedbackSig) * outAmp.dbamp;\
\};\
~dchan2.set(\cf5 \\highCut\cf2 , k.asMap(\cf5 \\knob2\cf2 ));\
~dchan2.set(\cf5 \\outAmp\cf2 , k.asMap(\cf5 \\slider2\cf2 ));\
\
\cf3 //////////////////////////////////////////////////////////////////////////////////////////////\cf2 \
\cf3 //\cf2 \

\f1\b ~dchan2
\f0\b0 .clear;\

\f1\b ~dchan2
\f0\b0  = \{\
	\cf4 | outAmp= -128, highCut=19070,\
		feedbackAmp = -1, feedbackDelay=#[4,6] |\cf2 \
	\cf4 var\cf2  in, feedbackSig, \
		dry, bpmMult;\
\
	bpmMult = \cf6 60 \cf2 / ~bpm.kr(\cf6 1\cf2 );\
	feedbackDelay = feedbackDelay * bpmMult;\
	\
	in = 
\f1\b ~in
\f0\b0 .ar(\cf6 2\cf2 );\
	in = \cf4 BHPF\cf2 .ar(in, \cf6 6\cf2 , highCut);	\
	\
	\cf3 // Feed stage\cf2 \
	feedbackSig = in + (\cf4 LocalIn\cf2 .ar(\cf6 2\cf2 ) * feedbackAmp.dbamp);\
	feedbackSig = \cf4 DelayC\cf2 .ar( feedbackSig, \cf6 10\cf2 , feedbackDelay );	feedbackSig = [ \
		(feedbackSig[\cf6 0\cf2 ] * \cf6 0.75\cf2 ) + (feedbackSig[\cf6 1\cf2 ] * \cf6 0.25\cf2 ),\
		(feedbackSig[\cf6 1\cf2 ] * \cf6 0.75\cf2 ) + (feedbackSig[\cf6 0\cf2 ] * \cf6 0.25\cf2 )\
	];\
	\
	\cf4 LocalOut\cf2 .ar(feedbackSig);\
	(in + feedbackSig) * outAmp.dbamp;\
\};\
~dchan2.set(\cf5 \\highCut\cf2 , k.asMap(\cf5 \\knob2\cf2 ));\
~dchan2.set(\cf5 \\outAmp\cf2 , k.asMap(\cf5 \\slider2\cf2 ));\
\
\cf3 //////////////////////////////////////////////////////////////////////////////////////////////\cf2 \
\cf3 //\cf2 \

\f1\b ~dchan3
\f0\b0 .clear;\

\f1\b ~dchan3
\f0\b0  = \{\
	\cf4 | outAmp= -128, feedAmt= -6,\
		feedbackAmp = -1, feedbackDelay=#[0.1,0.05] |\cf2 \
	\cf4 var\cf2  in, inAmp, feedbackSig, \
		dry, bpmMult;\
\
	bpmMult = \cf6 60 \cf2 / ~bpm.kr(\cf6 1\cf2 );\
	feedbackDelay = feedbackDelay * bpmMult;\
	\
	in = 
\f1\b ~in
\f0\b0 .ar(\cf6 2\cf2 );\
	inAmp = \cf4 Amplitude\cf2 .kr(in) * pi * \cf6 2\cf2 ;\
	\
	\cf3 // Feed stage\cf2 \
	feedbackSig = in + (\cf4 LocalIn\cf2 .ar(\cf6 2\cf2 ) * feedbackAmp.dbamp);\
	feedbackSig = \cf4 LeakDC\cf2 .ar(feedbackSig);\
	feedbackSig = \cf4 DelayC\cf2 .ar( feedbackSig, \cf6 10\cf2 , feedbackDelay );	feedbackSig = [ \
		(feedbackSig[\cf6 0\cf2 ] * \cf6 0.5\cf2 ) + (feedbackSig[\cf6 1\cf2 ] * \cf6 0.5\cf2 ),\
		(feedbackSig[\cf6 1\cf2 ] * \cf6 0.5\cf2 ) + (feedbackSig[\cf6 0\cf2 ] * \cf6 0.5\cf2 )\
	];\
	feedbackSig = \cf4 AudioMSG\cf2 .ar(feedbackSig, inAmp);\
	feedbackSig = (feedbackSig * \cf6 0.6\cf2 ) \
		+ \cf4 BLPF\cf2 .ar(feedbackSig, \cf6 6\cf2 , \cf4 LFNoise2\cf2 .kr(\cf6 0.5\cf2 ).range(\cf6 100\cf2 ,\cf6 4000\cf2 ));\
	\
	\cf4 LocalOut\cf2 .ar(feedbackSig*feedAmt.dbamp);\
	(in + feedbackSig) * outAmp.dbamp;\
\};\
~dchan3.set(\cf5 \\feedAmt\cf2 , k.asMap(\cf5 \\knob3\cf2 ));\
~dchan3.set(\cf5 \\outAmp\cf2 , k.asMap(\cf5 \\slider3\cf2 ));\
~dchan3.stop;\
\
\cf3 //////////////////////////////////////////////////////////////////////////////////////////////\cf2 \
\cf3 //\cf2 \

\f1\b ~dchan4
\f0\b0 .clear;\

\f1\b ~dchan4
\f0\b0  = \{\
	\cf4 | outAmp= -128, pulse = 0.5,\
		feedbackAmp = -1, feedbackDelay=#[0.15, 0.6] |\cf2 \
	\cf4 var\cf2  in, inAmp, feedbackSig, \
		dry, bpmMult;\
\
	bpmMult = \cf6 60 \cf2 / ~bpm.kr(\cf6 1\cf2 );\
	pulse = pulse * \cf0 bpmMult;\cf2 \
	feedbackDelay = feedbackDelay * bpmMult;\
	\
	in = 
\f1\b ~in
\f0\b0 .ar(\cf6 2\cf2 );\
	in = \cf8 LPF\cf0 .ar( \cf8 LFPulse\cf0 .ar(pulse, 0, 0.2), \cf7 8000\cf0 ) * in;\cf2 \
	\
	\cf3 // Feed stage\cf2 \
	feedbackSig = in + (\cf4 LocalIn\cf2 .ar(\cf6 2\cf2 ) * feedbackAmp.dbamp);\
	feedbackSig = \cf4 LeakDC\cf2 .ar(feedbackSig);\
	feedbackSig = \cf4 DelayC\cf2 .ar( feedbackSig, \cf6 10\cf2 , feedbackDelay );	feedbackSig = [ \
		(feedbackSig[\cf6 0\cf2 ] * \cf6 0.5\cf2 ) + (feedbackSig[\cf6 1\cf2 ] * \cf6 0.5\cf2 ),\
		(feedbackSig[\cf6 1\cf2 ] * \cf6 0.5\cf2 ) + (feedbackSig[\cf6 0\cf2 ] * \cf6 0.5\cf2 )\
	];\
	\
	\cf4 LocalOut\cf2 .ar(feedbackSig);\
	(in + feedbackSig) * outAmp.dbamp;\
\};\
~dchan4.set(\cf5 \\pulse\cf2 , k.asMap(\cf5 \\knob4\cf2 ));\
~dchan4.set(\cf5 \\outAmp\cf2 , k.asMap(\cf5 \\slider4\cf2 ));\
~dchan4.stop;\
\

\f1\b ~mainDelay
\f0\b0 .fadeTime = \cf6 4\cf2 ;\
\

\f1\b ~mainDelay
\f0\b0 .play}
